{
  "version": 3,
  "sources": ["../../../../node_modules/.deno/@tauri-apps+api@2.0.2/node_modules/@tauri-apps/api/app.js"],
  "sourcesContent": ["import { invoke } from './core.js';\nimport { Image } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Application metadata and related APIs.\n *\n * @module\n */\n/**\n * Gets the application version.\n * @example\n * ```typescript\n * import { getVersion } from '@tauri-apps/api/app';\n * const appVersion = await getVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getVersion() {\n    return invoke('plugin:app|version');\n}\n/**\n * Gets the application name.\n * @example\n * ```typescript\n * import { getName } from '@tauri-apps/api/app';\n * const appName = await getName();\n * ```\n *\n * @since 1.0.0\n */\nasync function getName() {\n    return invoke('plugin:app|name');\n}\n/**\n * Gets the Tauri version.\n *\n * @example\n * ```typescript\n * import { getTauriVersion } from '@tauri-apps/api/app';\n * const tauriVersion = await getTauriVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getTauriVersion() {\n    return invoke('plugin:app|tauri_version');\n}\n/**\n * Shows the application on macOS. This function does not automatically focus any specific app window.\n *\n * @example\n * ```typescript\n * import { show } from '@tauri-apps/api/app';\n * await show();\n * ```\n *\n * @since 1.2.0\n */\nasync function show() {\n    return invoke('plugin:app|app_show');\n}\n/**\n * Hides the application on macOS.\n *\n * @example\n * ```typescript\n * import { hide } from '@tauri-apps/api/app';\n * await hide();\n * ```\n *\n * @since 1.2.0\n */\nasync function hide() {\n    return invoke('plugin:app|app_hide');\n}\n/**\n * Get the default window icon.\n *\n * @example\n * ```typescript\n * import { defaultWindowIcon } from '@tauri-apps/api/app';\n * await defaultWindowIcon();\n * ```\n *\n * @since 2.0.0\n */\nasync function defaultWindowIcon() {\n    return invoke('plugin:app|default_window_icon').then((rid) => rid ? new Image(rid) : null);\n}\n/**\n * Set app's theme, pass in `null` or `undefined` to follow system theme\n *\n * @example\n * ```typescript\n * import { setTheme } from '@tauri-apps/api/app';\n * await setTheme('dark');\n * ```\n *\n * #### Platform-specific\n *\n * - **iOS / Android:** Unsupported.\n *\n * @since 2.0.0\n */\nasync function setTheme(theme) {\n    return invoke('plugin:app|set_app_theme', { theme });\n}\n\nexport { defaultWindowIcon, getName, getTauriVersion, getVersion, hide, setTheme, show };\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,eAAe,aAAa;AACxB,SAAO,OAAO,oBAAoB;AACtC;AAWA,eAAe,UAAU;AACrB,SAAO,OAAO,iBAAiB;AACnC;AAYA,eAAe,kBAAkB;AAC7B,SAAO,OAAO,0BAA0B;AAC5C;AAYA,eAAe,OAAO;AAClB,SAAO,OAAO,qBAAqB;AACvC;AAYA,eAAe,OAAO;AAClB,SAAO,OAAO,qBAAqB;AACvC;AAYA,eAAe,oBAAoB;AAC/B,SAAO,OAAO,gCAAgC,EAAE,KAAK,CAAC,QAAQ,MAAM,IAAI,MAAM,GAAG,IAAI,IAAI;AAC7F;AAgBA,eAAe,SAAS,OAAO;AAC3B,SAAO,OAAO,4BAA4B,EAAE,MAAM,CAAC;AACvD;",
  "names": []
}
