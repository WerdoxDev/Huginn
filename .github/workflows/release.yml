name: release

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:

  push:
    branches:
      - master

jobs:
  release-please:
   runs-on: ubuntu-latest
   outputs:
      app_release_needed: ${{steps.check_pr.outputs.app_release_needed}}
      app_release_pr_number: ${{steps.check_pr.outputs.app_release_pr_number}}

   steps:
      - uses: actions/checkout@v4

      - name: run release-please on release commit or dispatch
        uses: googleapis/release-please-action@v4
        id: release
        if: |
          github.event_name == 'workflow_dispatch' ||
          contains(github.event.head_commit.message, ': release')

      - name: check for app release pr
        id: check_pr
        run: |
          echo "Parsing release-pull-requests JSON..."

          RELEASE_PRS=$(cat << 'EOF'
          ${{steps.release.outputs.prs}}
          EOF
          )

          COMPONENT_NAME="app"

          echo "$RELEASE_PRS" | jq -c '.[]' | while read -r PR; do
            TITLE=$(echo "$PR" | jq -r '.title')
            if [[ "$TITLE" == *"$COMPONENT_NAME"* ]]; then
              echo "Found release PR for $COMPONENT_NAME: $TITLE"
              echo "app_release_needed=true" >> $GITHUB_OUTPUT
              echo "app_release_pr_number=$(echo "$PR" | jq -r '.number')" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          # Default to no release needed if not set
          echo "app_release_needed=false" >> $GITHUB_OUTPUT
          echo "app_release_pr_number=" >> $GITHUB_OUTPUT


  publish-app:
    needs: release-please
    strategy:
      fail-fast: false
      matrix:
         include:
            # - platform: 'ubuntu-22.04'
            #   args: ''
            - platform: 'windows-latest'
              args: ''

    runs-on: ${{ matrix.platform }}
    if: needs.release-please.outputs.app_release_needed == true
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup bun
        uses: oven-sh/setup-bun@v2

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './packages/huginn-app/src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: cd packages/huginn-app && bun install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app@v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'app: v__VERSION__'
          releaseBody: "${{needs.release-please.outputs.app_release_pr_number}}"
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
